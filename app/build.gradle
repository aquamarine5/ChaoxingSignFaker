plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    id("org.aquamarine5.brainspark.stackbricks-gradle-plugin") version "1.13"
    id("com.google.protobuf") version "0.9.4"
    id "io.sentry.android.gradle" version "5.3.0"
    id("org.jetbrains.kotlin.plugin.serialization") version "2.1.0"
}


stackbricksConfig {
    configJsonFilePath = "chaoxingsignfaker_stackbricks_v1_config.json"
    host = "cdn.aquamarine5.fun"
    qiniuConfig {
        accessKey = project.findProperty("qiniu.accessKey") ?: ""
        secretKey = project.findProperty("qiniu.secretKey") ?: ""
        bucket = "aquabucket"
        referer = project.findProperty("qiniu.referer") ?: ""
        println("Qiniu config: $accessKey, $secretKey, $bucket, $referer")
    }
}
android {
    namespace = "org.aquamarine5.brainspark.chaoxingsignfaker"
    compileSdk = 35

    defaultConfig {
        ndk {
            abiFilters "arm64-v8a"
        }
        applicationId = "org.aquamarine5.brainspark.chaoxingsignfaker"
        minSdk = 26
        targetSdk = 35
        versionCode = 101038805
        versionName = "1.1.3-stable-250319"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        create("release") {
            storeFile file("..\\chaoxingsignfaker.jks")
            storePassword System.getenv("keystorePassword")
            keyAlias "chaoxingsignfaker"
            keyPassword System.getenv("keystorePassword")
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles(
                    getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
            )
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }
    kotlinOptions {
        jvmTarget = "21"
    }
    buildFeatures {
        compose = true
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.18.0"
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}

dependencies {
    //implementation(libs.coil.network.cache.control)
    implementation(libs.coil.compose)
    implementation(libs.coil.network.okhttp)
    implementation libs.accompanist.permissions
    implementation libs.baidumapsdk.location
    implementation libs.stackbricks
    implementation libs.common
    implementation libs.asms
    implementation libs.kotlinx.serialization.json
    implementation libs.androidx.navigation.compose
    implementation libs.androidx.datastore
    implementation libs.baidumapsdk.map
    implementation libs.baidumapsdk.search
    implementation libs.protobuf.javalite
    implementation(libs.fastjson2)
    implementation(libs.okhttp)
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
}